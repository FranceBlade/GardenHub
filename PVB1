--// Load the UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/FranceBlade/GardenHub/refs/heads/main/KASHUI"))()

--// Create Window
local Lib = Library.CreateLibrary("KASH TEST", "Plants vs Brainrots")

local icon = Library.CreateFloatingIcon(Lib._mainFrame, "rbxassetid://125161562555332", 48)

--// Tabs
local Tab1 = Lib:AddTab("Home","rbxassetid://106809791072683")
local Tab2 = Lib:AddTab("Main","rbxassetid://105364893099735")

--// AutoBuy Seed
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local BuyEvent = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("BuyItem")

local seeds = {
    "Cactus Seed",
    "Strawberry Seed",
    "Sunflower Seed",
    "Pumpkin Seed",
    "Dragon Fruit Seed",
    "Eggplant Seed",
    "Watermelon Seed",
    "Grape Seed",
    "Cocotank Seed",
    "Carnivorous Plant Seed",
    "Pine-a-Punch Seed",
    "Mr Carrot Seed",
    "Tomatrio Seed",
    "Shroombino Seed",
    "Mango Seed"
}

getgenv().AutoBuy = false

local SeedDropdown = Tab1:AddDropdown("Pick Seed", seeds)
SeedDropdown.OnChanged:Connect(function(val)
	getgenv().SelectedSeed = typeof(val) == "table" and val[1] or val
end)

Tab1:AddToggle("AutoBuy All Seeds", false, function(v)
	getgenv().AutoBuy = v
end)

RunService.Heartbeat:Connect(function()
	if getgenv().AutoBuy then
		for _, seed in ipairs(seeds) do
			if not getgenv().AutoBuy then break end
			pcall(function()
				BuyEvent:FireServer(seed, true)
			end)
			task.wait(1.5) -- delay between each buy
		end
	end
end)

--// AutoBuy Gear
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local BuyGearEvent = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("BuyGear")

local gears = {
    "Water Bucket",
    "Frost Blower",
    "Frost Grenade",
    "Carrot Launcher",
    "Banana Gun"
}

getgenv().AutoBuyGear = false

local GearDropdown = Tab1:AddDropdown("Pick Gear", gears)
GearDropdown.OnChanged:Connect(function(val)
	getgenv().SelectedGear = typeof(val) == "table" and val[1] or val
end)

Tab1:AddToggle("AutoBuy Gears", false, function(v)
	getgenv().AutoBuyGear = v
end)

RunService.Heartbeat:Connect(function()
	if getgenv().AutoBuyGear then
		for _, gear in ipairs(gears) do
			if not getgenv().AutoBuyGear then break end
			pcall(function()
				BuyGearEvent:FireServer(gear, true)
			end)
			task.wait(1.5) -- delay between each buy
		end
	end
end)

--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

--// Player & Backpack
local player = Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local char = player.Character or player.CharacterAdded:Wait()

--// Remote
local SellEvent = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ItemSell")

--// Modules
local BrainrotModule = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Utility"):WaitForChild("Util"))

--// Settings
getgenv().AutoSell = false
getgenv().SellBelowKG = 40
getgenv().SelectedRarities = {"Rare","Epic","Legendary","Mythic","Godly","Secret","Limited"} -- skip these rarities
getgenv().SkipMutations = {"Gold","Rainbow","Diamond","Neon"} -- skip these mutations

--// Extract KG from name
local function ExtractKG(name)
	local kg = string.match(name, "%[(%d+%.?%d*)%s*kg%]")
	return kg and tonumber(kg) or nil
end

--// Check if item passes filters
local function CanSell(item)
	local kg = ExtractKG(item.Name)
	if not kg or kg >= getgenv().SellBelowKG then return false end

	local mutation = item:GetAttribute("Mutation")
	local rarity

	-- Check Brainrot rarity
	local brainrotName = item:GetAttribute("Brainrot")
	if brainrotName then
		local entry = BrainrotModule:GetBrainrotEntry(brainrotName)
		if entry then
			rarity = entry.Rarity
		end
	else
		rarity = item:GetAttribute("Rarity")
	end

	-- Skip if rarity is in skip list
	if rarity and table.find(getgenv().SelectedRarities, rarity) then
		return false
	end

	-- Skip if mutation is in skip list or appears in name
	if mutation and table.find(getgenv().SkipMutations, mutation) then
		return false
	end
	for _, m in ipairs(getgenv().SkipMutations) do
		if string.find(item.Name:lower(), m:lower()) then
			return false
		end
	end

	return true
end

--// Equip & click tool
local function EquipAndClick(item)
	if item.Parent ~= char then
		item.Parent = char
		repeat task.wait() until char:FindFirstChild(item.Name)
	end
	pcall(function()
		if item:IsA("Tool") then item:Activate() end
	end)
end

--// Auto-sell loop
task.spawn(function()
	while task.wait(0.5) do
		if not getgenv().AutoSell then continue end

		for _, item in ipairs(backpack:GetChildren()) do
			if (item:IsA("Tool") or item:IsA("Model")) and CanSell(item) then
				EquipAndClick(item)
				task.wait(0.35)
				SellEvent:FireServer(true)
				task.wait(0.25)
			end
		end
	end
end)

--// UI Setup
local RarityDropdown = Tab2:AddDropdown("Pick Rarity to Skip", getgenv().SelectedRarities)
RarityDropdown.OnChanged:Connect(function(val)
	if typeof(val) == "table" then
		getgenv().SelectedRarities = val
	else
		getgenv().SelectedRarities = {val}
	end
end)

local MutationDropdown = Tab2:AddDropdown("Skip Mutations", getgenv().SkipMutations)
MutationDropdown.OnChanged:Connect(function(val)
	if typeof(val) == "table" then
		getgenv().SkipMutations = val
	else
		getgenv().SkipMutations = {val}
	end
end)

Tab2:AddTextBox("Sell Below this", "Enter kg...", "", function(text)
	local num = tonumber(text)
	if num then
		getgenv().SellBelowKG = num
	end
end)

Tab2:AddToggle("Auto Sell", false, function(state)
	getgenv().AutoSell = state
end)
