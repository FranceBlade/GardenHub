--// Load the UI Library
local Library = loadstring(game:HttpGet("https://pastebin.com/raw/LKivCcbW"))()

--// Create Window
local Lib = Library.CreateLibrary("KASH TEST", "Plants vs Brainrots")

local icon = Library.CreateFloatingIcon(Lib._mainFrame, "rbxassetid://125161562555332", 48)

--// Tabs
local Tab1 = Lib:AddTab("Home","rbxassetid://106809791072683")
local Tab2 = Lib:AddTab("Main","rbxassetid://105364893099735")

--// AutoBuy Seed
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local BuyEvent = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("BuyItem")

local seeds = {
"Cactus Seed",
"Strawberry Seed",
"Sunflower Seed",
"Pumpkin Seed",
"Dragon Fruit Seed",
"Eggplant Seed",
"Watermelon Seed",
"Grape Seed",
"Cocotank Seed",
"Carnivorous Plant Seed",
"Pine-a-Punch Seed",
"Mr Carrot Seed",
"Tomatrio Seed",
"Shroombino Seed",
"Mango Seed"
}

getgenv().AutoBuy = false

local SeedDropdown = Tab1:AddDropdown("Pick Seed", seeds)
SeedDropdown.OnChanged:Connect(function(val)
getgenv().SelectedSeed = typeof(val) == "table" and val[1] or val
end)

Tab1:AddToggle("AutoBuy All Seeds", false, function(v)
getgenv().AutoBuy = v
end)

RunService.Heartbeat:Connect(function()
if getgenv().AutoBuy then
for _, seed in ipairs(seeds) do
if not getgenv().AutoBuy then break end
pcall(function()
BuyEvent:FireServer(seed, true)
end)
task.wait(1.5) -- delay between each buy
end
end
end)

--// AutoBuy Gear
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local BuyGearEvent = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("BuyGear")

local gears = {
"Water Bucket",
"Frost Blower",
"Frost Grenade",
"Carrot Launcher",
"Banana Gun"
}

getgenv().AutoBuyGear = false

local GearDropdown = Tab1:AddDropdown("Pick Gear", gears)
GearDropdown.OnChanged:Connect(function(val)
getgenv().SelectedGear = typeof(val) == "table" and val[1] or val
end)

Tab1:AddToggle("AutoBuy Gears", false, function(v)
getgenv().AutoBuyGear = v
end)

RunService.Heartbeat:Connect(function()
if getgenv().AutoBuyGear then
for _, gear in ipairs(gears) do
if not getgenv().AutoBuyGear then break end
pcall(function()
BuyGearEvent:FireServer(gear, true)
end)
task.wait(1.5) -- delay between each buy
end
end
end)

--// Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

--// Player & Backpack
local player = Players.LocalPlayer
local backpack = player:WaitForChild("Backpack")
local char = player.Character or player.CharacterAdded:Wait()

--// Remote
local SellEvent = ReplicatedStorage:WaitForChild("Remotes"):WaitForChild("ItemSell")

--// Modules
local BrainrotModule = require(ReplicatedStorage:WaitForChild("Modules"):WaitForChild("Utility"):WaitForChild("Util"))

--// Settings
getgenv().AutoSell = false
getgenv().SellBelowKG = nil -- must set before selling starts
getgenv().SelectedRarities = {}
getgenv().SkipMutations = {}

--// Dropdown Lists
local RarityList = {"Rare", "Epic", "Legendary", "Mythic", "Godly", "Secret", "Limited"}
local MutationList = {
	"Gold", "Rainbow", "Diamond", "Neon",
	"Normal", "Magma", "UpsideDown", "Galactic"
}

--// Extract KG
local function ExtractKG(name)
	local kg = string.match(name, "%[(%d+%.?%d*)%s*kg%]")
	return kg and tonumber(kg) or nil
end

--// Check if sellable
local function CanSell(item)
	local kg = ExtractKG(item.Name)
	if not kg or not getgenv().SellBelowKG or kg >= getgenv().SellBelowKG then
		return false
	end

	local mutation = item:GetAttribute("Mutation")
	local rarity

	local brainrotName = item:GetAttribute("Brainrot")
	if brainrotName then
		local entry = BrainrotModule:GetBrainrotEntry(brainrotName)
		if entry then
			rarity = entry.Rarity
		end
	else
		rarity = item:GetAttribute("Rarity")
	end

	-- Skip only when selected in dropdowns
	if #getgenv().SelectedRarities > 0 and rarity and table.find(getgenv().SelectedRarities, rarity) then
		return false
	end

	if #getgenv().SkipMutations > 0 and mutation and table.find(getgenv().SkipMutations, mutation) then
		return false
	end

	return true
end

--// Auto confirm (always yes)
local function ConfirmSell()
	return true
end

--// Equip and click
local function EquipAndClick(item)
	if item.Parent ~= char then
		item.Parent = char
		repeat task.wait() until char:FindFirstChild(item.Name)
	end
	pcall(function()
		if item:IsA("Tool") then item:Activate() end
	end)
end

--// Auto-sell loop
task.spawn(function()
	while task.wait(0.5) do
		if getgenv().AutoSell and getgenv().SellBelowKG and getgenv().SellBelowKG > 0 then
			for _, item in ipairs(backpack:GetChildren()) do
				if not getgenv().AutoSell then break end
				if (item:IsA("Tool") or item:IsA("Model")) and CanSell(item) then
					if ConfirmSell() then
						EquipAndClick(item)
						task.wait(0.35)
						SellEvent:FireServer(true)
						task.wait(0.25)
					end
				end
			end
		end
	end
end)

--// UI Setup
-- Rarity dropdown
local RarityDropdown = Tab2:AddDropdown("Pick Rarity to Skip", RarityList, {})
RarityDropdown.OnChanged:Connect(function(val)
	if typeof(val) == "table" then
		getgenv().SelectedRarities = val
	elseif typeof(val) == "string" and val ~= "" then
		getgenv().SelectedRarities = {val}
	else
		getgenv().SelectedRarities = {}
	end
end)

-- Mutation dropdown
local MutationDropdown = Tab2:AddDropdown("Skip Mutations", MutationList, {})
MutationDropdown.OnChanged:Connect(function(val)
	if typeof(val) == "table" then
		getgenv().SkipMutations = val
	elseif typeof(val) == "string" and val ~= "" then
		getgenv().SkipMutations = {val}
	else
		getgenv().SkipMutations = {}
	end
end)

-- Sell Below text box
Tab2:AddTextBox("Sell Below this", "Enter kg...", "", function(text)
	local num = tonumber(text)
	if num and num > 0 then
		getgenv().SellBelowKG = num
	else
		getgenv().SellBelowKG = nil
	end
end)

-- Auto-sell toggle
Tab2:AddToggle("Auto Sell", false, function(state)
	getgenv().AutoSell = state
	if state and (not getgenv().SellBelowKG or getgenv().SellBelowKG <= 0) then
		warn("[AutoSell] Set a valid KG first before enabling!")
	end
end)
